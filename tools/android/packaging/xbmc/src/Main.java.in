package @APP_PACKAGE@;

import android.app.AlertDialog;
import android.app.NativeActivity;
import android.app.ProgressDialog;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.graphics.Rect;
//import android.media.AudioDeviceCallback;
//import android.media.AudioDeviceInfo;
import android.media.AudioManager;
import android.media.Image;
import android.media.projection.MediaProjection;
import android.media.projection.MediaProjectionManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.text.Html;
import android.util.Log;
import android.view.Choreographer;
import android.view.View;
import android.view.Surface;
import android.view.Window;
import android.view.WindowManager;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.net.Uri;

import java.text.MessageFormat;

public class Main extends NativeActivity implements Choreographer.FrameCallback
{
  private static final String TAG = "@APP_NAME_UC@";
  private static final int INTENT_RESULT_PROJECT_CODE = 4658;

  public static Main MainActivity = null;
  public XBMCMainView mMainView = null;

  private XBMCSettingsContentObserver mSettingsContentObserver;
  private XBMCJsonRPC mJsonRPC = null;
  private XBMCProjection mCaptureProjection = null;
  private XBMCProjection mScreenshotProjection = null;
  private View mDecorView = null;
  private RelativeLayout mVideoLayout = null;
  private Handler handler = new Handler();
  private Intent mNewIntent = null;
  private int mNewIntentDelay = 0;
  private MediaProjection mMediaProjection;
  private int mProjectionIntentId = 0;

  native void _onNewIntent(Intent intent);
  native void _onActivityResult(int requestCode, int resultCode, Intent resultData);
  native void _doFrame(long frameTimeNanos);
//  native void _onAudioDeviceAdded(AudioDeviceInfo[] addedDevices);
//  native void _onAudioDeviceRemoved(AudioDeviceInfo[] removedDevices);
  native void _onCaptureAvailable(Image img);
  native void _onScreenshotAvailable(Image img);
  native void _onVisibleBehindCanceled();
  native void _onMultiWindowModeChanged(boolean isInMultiWindowMode);
  native void _onPictureInPictureModeChanged(boolean isInPictureInPictureMode);
  native void _onUserLeaveHint();
/*
  private class MyAudioDeviceCallback extends AudioDeviceCallback
  {
    public void onAudioDevicesAdded(AudioDeviceInfo[] addedDevices)
    {
      if (addedDevices.length != 0)
        _onAudioDeviceAdded(addedDevices);
    }

    public void onAudioDevicesRemoved(AudioDeviceInfo[] removedDevices)
    {
      if (removedDevices.length != 0)
        _onAudioDeviceRemoved(removedDevices);
    }
  }
*/

  private Runnable leanbackUpdateRunnable = new Runnable()
  {
    @Override
    public void run()
    {
      Log.d(TAG, "Updating recommendations");
      new Thread()
      {
        public void run()
        {
          mJsonRPC.updateLeanback(Main.this);
        }
      }.start();
      handler.postDelayed(this, XBMCProperties.getIntProperty("xbmc.leanbackrefresh", 60*60) * 1000);
    }
  };

  public Main()
  {
    super();
    MainActivity = this;
  }

  public void registerMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.registerMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void unregisterMediaButtonEventReceiver()
  {
    AudioManager manager = (AudioManager) getSystemService(AUDIO_SERVICE);
    manager.unregisterMediaButtonEventReceiver(new ComponentName(getPackageName(), XBMCBroadcastReceiver.class.getName()));
  }

  public void screenOn()
  {
    Window window = getWindow();
    window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);
  }

  public void takeScreenshot()
  {
    if (mMediaProjection == null)
      return;
    mScreenshotProjection.takeScreenshot();
  }

  public void startProjection()
  {
    final MediaProjectionManager projectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
    startActivityForResult(projectionManager.createScreenCaptureIntent(), INTENT_RESULT_PROJECT_CODE);
    mProjectionIntentId = INTENT_RESULT_PROJECT_CODE;
  }

  public void Initialize(int resultCode, Intent resultData)
  {
    final MediaProjectionManager projectionManager = (MediaProjectionManager) getSystemService(MEDIA_PROJECTION_SERVICE);
    mMediaProjection = projectionManager.getMediaProjection(resultCode, resultData);
    mCaptureProjection = new XBMCProjection(this, mMediaProjection);
    mScreenshotProjection = new XBMCProjection(this, mMediaProjection);
  }

  public void startCapture(int width, int height)
  {
    if (mMediaProjection == null)
      return;
    mCaptureProjection.startCapture(width, height);
  }

  public void stopCapture()
  {
    mCaptureProjection.stopCapture();
  }

  public void openAmazonStore()
  {
    // string below is linking to our full app on Amazon Store
    final String appPackageName = "B01ENT3I1Q";
    try {
        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("amzn://apps/android?asin=" + appPackageName)));
    } catch (android.content.ActivityNotFoundException anfe) {
        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://www.amazon.com/gp/mas/dl/android?asin=" + appPackageName)));
    }
  }

  public void openGooglePlayStore()
  {
    // string below is linking to our full app on Google Play store
    final String appPackageName = "tv.mrmc.mrmc";
    try {
        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
    } catch (android.content.ActivityNotFoundException anfe) {
        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
    }
  }

  public void openYouTubeVideo(final String key)
  {
    try
    {
      Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("vnd.youtube://" + key));
      // Check if the youtube app exists on the device
      if (intent.resolveActivity(getPackageManager()) == null) {
          // If the youtube app doesn't exist, then use the browser
          intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.youtube.com/watch?v=" + key));
      }
      startActivity(intent);
    }
    catch (Exception e) {}
  }

  private void hideSystemUI()
  {
    mVideoLayout.setFitsSystemWindows(false);

    // Set the IMMERSIVE flag.
    // Set the content to appear under the system bars so that the content
    // doesn't resize when the system bars hide and show.
    mDecorView.setSystemUiVisibility(
        View.SYSTEM_UI_FLAG_LAYOUT_STABLE
            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
            | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
  }

  private void showSystemUI()
  {

    mVideoLayout.setFitsSystemWindows(true);

    mDecorView.setSystemUiVisibility(
        View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
  }

  @Override
  public void onCreate(Bundle savedInstanceState)
  {
    System.loadLibrary("@APP_NAME_LC@");

    super.onCreate(savedInstanceState);

    setVolumeControlStream(AudioManager.STREAM_MUSIC);

    mSettingsContentObserver = new XBMCSettingsContentObserver(this, handler);
    getApplicationContext().getContentResolver().registerContentObserver(android.provider.Settings.System.CONTENT_URI, true, mSettingsContentObserver );
    mJsonRPC = new XBMCJsonRPC();

    // Delayed Intent
    if (getIntent().getData() != null)
    {
      mNewIntent = new Intent(getIntent());
      mNewIntentDelay = 5000;
      getIntent().setData(null);
    }

    mDecorView = getWindow().getDecorView();
    getWindow().takeSurface(null);
    setContentView(R.layout.activity_main);
    mVideoLayout = (RelativeLayout)findViewById(R.id.VideoLayout);

    mMainView = new XBMCMainView(this);
    RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
    mMainView.setElevation(1);  // Always on Top
    mVideoLayout.addView(mMainView, layoutParams);

    hideSystemUI();
}

  @Override
  protected void onNewIntent(Intent intent)
  {
    super.onNewIntent(intent);
    // Delay until after Resume
    mNewIntent = intent;
    mNewIntentDelay = 500;
  }

  @Override
  public void onStart()
  {
    super.onStart();

    Choreographer.getInstance().removeFrameCallback(this);
    Choreographer.getInstance().postFrameCallback(this);
  }

  @Override
  public void onResume()
  {
    super.onResume();

    // New intent ?
    if (mNewIntent != null)
    {
      handler.postDelayed(new Runnable()
        {
          @Override
          public void run()
          {
            try {
              if (mNewIntent != null)  // Still valid?
                _onNewIntent(mNewIntent);
            } catch (UnsatisfiedLinkError e) {
              Log.e("Main", "Native not registered");
            } finally {
              mNewIntent = null;
            }
          }
        }, mNewIntentDelay);
    }
  }

  @Override
  public void onPause()
  {
    super.onPause();

    if (getPackageManager().hasSystemFeature("android.software.leanback"))
    {
      // Leanback
      handler.removeCallbacks(leanbackUpdateRunnable);
      handler.postDelayed(leanbackUpdateRunnable, 1000);
    }

}

  @Override
  public void onActivityResult(int requestCode, int resultCode,
      Intent resultData)
  {
    if (requestCode == mProjectionIntentId)
    {
      if (resultCode == RESULT_OK)
        Initialize(resultCode, resultData);
      return;
    }

    _onActivityResult(requestCode, resultCode, resultData);
  }

  @Override
  public void onDestroy()
  {
    getApplicationContext().getContentResolver().unregisterContentObserver(mSettingsContentObserver);
    handler.removeCallbacks(leanbackUpdateRunnable);

    new Thread() {
      public void run()
      {
        try
        {
          sleep(5000);
          android.os.Process.killProcess(android.os.Process.myPid());
        } catch (Exception e) {}
      }
    }.start();
    super.onDestroy();
  }

  @Override
  public void onVisibleBehindCanceled()
  {
    _onVisibleBehindCanceled();
    super.onVisibleBehindCanceled();
  }

  @Override
  public void onMultiWindowModeChanged(boolean isInMultiWindowMode)
  {
    if (android.os.Build.VERSION.SDK_INT >= 24)
    {
      if (isInMultiWindowMode)
        showSystemUI();
      else
        hideSystemUI();
      _onMultiWindowModeChanged(isInMultiWindowMode);
      super.onMultiWindowModeChanged(isInMultiWindowMode);
    }
  }

  @Override
  public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode)
  {
    if (android.os.Build.VERSION.SDK_INT >= 24)
    {
      _onPictureInPictureModeChanged(isInPictureInPictureMode);
      super.onPictureInPictureModeChanged(isInPictureInPictureMode);
    }
  }

  @Override
  public void onUserLeaveHint()
  {
    _onUserLeaveHint();
  }

  @Override
  public void doFrame(long frameTimeNanos)
  {
    Choreographer.getInstance().postFrameCallback(this);
    _doFrame(frameTimeNanos);
  }

  private native void _callNative(long funcAddr, long variantAddr);

  private void runNativeOnUiThread(final long funcAddr, final long variantAddr)
  {
    runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        _callNative(funcAddr, variantAddr);
      }
    });
  }
}
