package @APP_PACKAGE@;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Build;
import android.os.IBinder;

public class Service extends android.app.Service
{
  native boolean _launchApplication();

  public String mDeviceName = Build.MODEL;

  static private Boolean m_isStarted = false;
  public static Boolean isStarted()
  {
    return m_isStarted;
  }

  public Service()
  {
  }

  @Override
  public void onCreate()
  {
    System.loadLibrary("@APP_NAME_LC@");
    super.onCreate();

    BluetoothAdapter btDevice = BluetoothAdapter.getDefaultAdapter();
    if (btDevice != null)
      mDeviceName = btDevice.getName();
  }

  @Override
  public int onStartCommand(Intent intent, int flags, int startId)
  {
    Bitmap icon = BitmapFactory.decodeResource(getResources(),
        R.drawable.ic_recommendation_80dp);

    Notification.Builder builder = new Notification.Builder(this)
        .setContentTitle(getString(R.string.app_name))
        .setContentText("@APP_NAME@ is running...")
        .setSmallIcon(R.drawable.notif_icon)
        .setLargeIcon(Bitmap.createScaledBitmap(icon, 128, 128, false))
        ;

    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
    {
      NotificationManager mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

      String id = "mrmc_channel_svc";
      CharSequence name = getString(R.string.notif_channel_name);

      // The user-visible description of the channel.
      String description = getString(R.string.notif_channel_desc);
      int importance = NotificationManager.IMPORTANCE_LOW;

      NotificationChannel mChannel = new NotificationChannel(id, name, importance);

      // Configure the notification channel.
      mChannel.setDescription(description);

      mNotificationManager.createNotificationChannel(mChannel);
      builder.setChannelId(id);
    }
    Notification notification = builder.build();

    startForeground(1, notification);

    if (!m_isStarted)
      m_isStarted =_launchApplication();
    if (m_isStarted)
    {
      Intent i = new Intent("@APP_PACKAGE@.SERVICE_STARTED");
      sendBroadcast(i);
    }

    return START_STICKY;
  }

  @Override
  public void onDestroy()
  {
    Intent i = new Intent("@APP_PACKAGE@.SERVICE_STOPPED");
    sendBroadcast(i);

    super.onDestroy();
  }

  @Override
  public IBinder onBind(Intent intent)
  {
    // TODO: Return the communication channel to the service.
    throw new UnsupportedOperationException("Not implemented");
  }
}
